The TMP175 device is a temperature sensor with a good datasheet, making it easy to control. 
In the source code we can check the facts and functions:
-----------------------------------------------------------------------------------------------------------------------
The frequency for the SCL signal is 100 kHz, which lies between the lower and upper limit of the normal mode for this sensor, 0.001 to 0.4 MHz (1-400 kHz). 
The address we chose with A0, A1 and A2 pins was connecting every pin to GND (A0 = A1 = A2 = 0). Making the TMP175 slave address 1001000 (0x48) with 7 bits, due to I2C communication being done with 8 data bits, the 8th bit will be a Read or Write bit if it is 1 or 0, respectively. This makes the address byte that we will need to send before write instructions 10010000 (0x90) and for reading 10010001 (0x91).
To communicate with the sensor, we first need to configure it. This is done by sending an address byte to write (0x90), then we send a byte for altering the pointer register byte to the configuration register which is 0x01. This last two bits are the P1 and P0 bits of the register's pointer byte. 
In this case we want to configure the sensor to output the temperature with 12 bits, 8 integers plus 4 bits for decimals, making it precise to 0,0625 ÂºC. For this, we need to send the configuration register byte which we will only use 2 bits out of this byte, resulting on the rest of the bits to be 0, due to the rest of those configuration bits, not being necessary to this work.
The only bits that will have any values, will be the R1 and R0(both 1), by utilizing this resolution, we increase the conversion time to 220 ms. This will be dealt by adding a delay of 250 ms.
After this configuration, we will need to reconfigure the sensor back to the temperature reading register. The output of the temperature register will be done with 2 bytes, the first one will have the most significant bits and will have the integers values. The second byte will have the four most significant bits equal to the decimal values and the last four equals to 0. 
So, to get a temperature read, we will need to configure back the pointer to the temperature register, sending first a Write address byte (0x90) and right after the temperature register byte (0x00). After this, it is ready to output temperature values.
Now, we only need to send a Read address byte and read 2 bytes right after to get the full 12 bits of temperature data. 
In the end, this code in the Arduino will setup the sensor to read temperature values, the UART with the computer. In the loop section it will only send back by UART, the temperature reading each 250 ms. This UART section of the code is setup at 9600 baud rate, 8 bits and no parity.
-----------------------------------------------------------------------------------------------------------------------
Receiving this type of communication can be done with programs like PuTTY, which has no graphical user interface and is easy to use. Because PuTTY has no GUI, we created a Python script for this. To see and understand this part of the task, check the other section of Task 2.
